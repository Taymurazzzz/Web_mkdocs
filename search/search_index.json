{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"index.html#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"lab1.html","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1 \u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u044c \u0441 \u0432\u0435\u0431-\u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438 \u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_socket.bind(('localhost', 8081)) while True: data, client_address = server_socket.recvfrom(1024) if data.decode() == \"Hello, server\": response = 'Hello, client' server_socket.sendto(response.encode(), client_address) else: response = \"Bye\" server_socket.sendto(response.encode(), client_address) \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) message = 'Hello, server' client_socket.sendto(message.encode(), ('localhost', 8081)) response, _ = client_socket.recvfrom(1024) print(f'\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {response.decode()}') client_socket.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0414\u043b\u044f \u043c\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0448\u0438\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket import math server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 8081)) server_socket.listen(1) while True: client_connection, client_address = server_socket.accept() request = client_connection.recv(1024).decode() eq_params = request.split(\" \") a = int(eq_params[0]) b = int(eq_params[1]) c = int(eq_params[2]) discr = b ** 2 - 4 * a * c if discr > 0: x1 = (-b + math.sqrt(discr)) / (2 * a) x2 = (-b - math.sqrt(discr)) / (2 * a) response = \"x1 = %.2f \\nx2 = %.2f\" % (x1, x2) client_connection.sendall(response.encode()) elif discr == 0: x = -b / (2 * a) response = \"x = %.2f\" % x client_connection.sendall(response.encode()) else: response = \"\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\" client_connection.sendall(response.encode()) client_connection.close() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 8081)) params = input() client_socket.sendall(bytes(params, \"utf-8\")) response = client_socket.recv(1024) print(f'\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {response.decode()}') client_socket.close() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 8082)) server_socket.listen(1) while True: client_socket, client_address = server_socket.accept() print(f\"Connection from {client_address}\") request = client_socket.recv(1024).decode('utf-8') print(f\"Request:\\n{request}\") with open(\"index.html\", \"r\") as file: html_content = file.read() response = ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=utf-8\\r\\n\" f\"Content-Length: {len(html_content)}\\r\\n\" \"Connection: close\\r\\n\" \"\\r\\n\" f\"{html_content}\" ) client_socket.sendall(response.encode('utf-8')) client_socket.close() \u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0438 <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Welcome Page</title> <style> body { font-family: Arial, sans-serif; text-align: center; background-color: #f4f4f9; color: #333; margin: 0; padding: 0; } header { background-color: #007BFF; color: white; padding: 20px; } h1 { margin: 0; } main { padding: 20px; } footer { background-color: #333; color: white; padding: 10px; position: fixed; bottom: 0; width: 100%; } a { color: #007BFF; text-decoration: none; } </style> </head> <body> <header> <h1>Welcome to My Page!</h1> </header> <main> <p>Hello, world! This is a simple HTML welcome page.</p> <p>Feel free to explore and <a href=\"#\">learn more about HTML</a>.</p> </main> <footer> <p>\u00a9 2025 Your Name. All rights reserved.</p> </footer> </body> </html> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket import threading clients = [] def handle_client(client_socket): clients.append(client_socket) while True: message = client_socket.recv(1024) if message.decode().lower() == 'exit' : clients.remove(client_socket) continue message = f\"User{str(client_socket).split(',')[0][18:]}: {message.decode()}\".encode() broadcast(message, client_socket) def broadcast(message, sender_socket): for client in clients: if client != sender_socket: client.send(message) def start_server(host='localhost', port=8083): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"Server is running on {host}:{port}\") while True: client_socket, client_address = server_socket.accept() thread = threading.Thread(target=handle_client, args=(client_socket,)) thread.start() if __name__ == \"__main__\": start_server() \u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 import socket import threading def receive_messages(client_socket): while True: message = client_socket.recv(1024).decode('utf-8') print(message) def start_client(host='localhost', port=8083): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((host, port)) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() while True: message = input() if message.lower() == 'exit': client_socket.send(message.encode('utf-8')) client_socket.close() break client_socket.send(message.encode('utf-8')) if __name__ == \"__main__\": start_client() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: * \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. * \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 import socket import threading import urllib.parse grades = {} def handle_client(client_socket): request = client_socket.recv(1024).decode('utf-8') headers = request.split('\\r\\n') first_line = headers[0] method, path, _ = first_line.split() if method == \"POST\" and path == \"/grades\": content = headers[-1] content = content.split('&') discipline = urllib.parse.unquote(content[0][11:]) grade = urllib.parse.unquote(content[1][6:]) grades[discipline] = grades.get(discipline, []) + [grade] print(grades) response = \"HTTP/1.1 303 See Other\\r\\nLocation: /grades\\r\\n\\r\\n\" client_socket.sendall(response.encode()) elif method == \"GET\" and path == \"/grades\": response_body = \"\"\" <html> <head><title>\u041e\u0446\u0435\u043d\u043a\u0438</title></head> <body> <h1>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</h1> <ul> \"\"\" for discipline in grades: response_body += f\"<li>{discipline}: {', '.join(map(str, grades.get(discipline, [])))}</li>\" response_body += \"\"\" </ul> <h2>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</h2> <form method=\"post\" action=\"/grades\"> \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: <input type=\"text\" name=\"discipline\"><br> \u041e\u0446\u0435\u043d\u043a\u0430: <input type=\"text\" name=\"grade\"><br> <input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"> </form> </body> </html> \"\"\" response = ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=utf-8\\r\\n\" f\"Content-Length: {len(response_body.encode())}\\r\\n\" \"Connection: close\\r\\n\" \"\\r\\n\" f\"{response_body}\" ) client_socket.sendall(response.encode('utf-8')) client_socket.close() def start_server(host=\"localhost\", port=8085): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\") while True: client_sock, _ = server_socket.accept() handle_client(client_sock) if __name__ == \"__main__\": start_server() \u0412\u044b\u0432\u043e\u0434 \u0412 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u044f \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket , \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u0430\u0437\u043e\u0432\u043e \u0438\u0437\u0443\u0447\u0438\u043b \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b TCP, UDP \u0438 HTTP","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"lab1.html#1","text":"\u0412 \u044d\u0442\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u044c \u0441 \u0432\u0435\u0431-\u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 1"},{"location":"lab1.html#1_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"lab1.html#_1","text":"import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) server_socket.bind(('localhost', 8081)) while True: data, client_address = server_socket.recvfrom(1024) if data.decode() == \"Hello, server\": response = 'Hello, client' server_socket.sendto(response.encode(), client_address) else: response = \"Bye\" server_socket.sendto(response.encode(), client_address)","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1.html#_2","text":"import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) message = 'Hello, server' client_socket.sendto(message.encode(), ('localhost', 8081)) response, _ = client_socket.recvfrom(1024) print(f'\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {response.decode()}') client_socket.close()","title":"\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"lab1.html#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0414\u043b\u044f \u043c\u043e\u0435\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0440\u0435\u0448\u0438\u0442\u044c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0435 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u0435.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"lab1.html#_3","text":"import socket import math server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 8081)) server_socket.listen(1) while True: client_connection, client_address = server_socket.accept() request = client_connection.recv(1024).decode() eq_params = request.split(\" \") a = int(eq_params[0]) b = int(eq_params[1]) c = int(eq_params[2]) discr = b ** 2 - 4 * a * c if discr > 0: x1 = (-b + math.sqrt(discr)) / (2 * a) x2 = (-b - math.sqrt(discr)) / (2 * a) response = \"x1 = %.2f \\nx2 = %.2f\" % (x1, x2) client_connection.sendall(response.encode()) elif discr == 0: x = -b / (2 * a) response = \"x = %.2f\" % x client_connection.sendall(response.encode()) else: response = \"\u041a\u043e\u0440\u043d\u0435\u0439 \u043d\u0435\u0442\" client_connection.sendall(response.encode()) client_connection.close()","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1.html#_4","text":"import socket client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 8081)) params = input() client_socket.sendall(bytes(params, \"utf-8\")) response = client_socket.recv(1024) print(f'\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {response.decode()}') client_socket.close()","title":"\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"lab1.html#3","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"lab1.html#_5","text":"import socket server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 8082)) server_socket.listen(1) while True: client_socket, client_address = server_socket.accept() print(f\"Connection from {client_address}\") request = client_socket.recv(1024).decode('utf-8') print(f\"Request:\\n{request}\") with open(\"index.html\", \"r\") as file: html_content = file.read() response = ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=utf-8\\r\\n\" f\"Content-Length: {len(html_content)}\\r\\n\" \"Connection: close\\r\\n\" \"\\r\\n\" f\"{html_content}\" ) client_socket.sendall(response.encode('utf-8')) client_socket.close()","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1.html#_6","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <title>Welcome Page</title> <style> body { font-family: Arial, sans-serif; text-align: center; background-color: #f4f4f9; color: #333; margin: 0; padding: 0; } header { background-color: #007BFF; color: white; padding: 20px; } h1 { margin: 0; } main { padding: 20px; } footer { background-color: #333; color: white; padding: 10px; position: fixed; bottom: 0; width: 100%; } a { color: #007BFF; text-decoration: none; } </style> </head> <body> <header> <h1>Welcome to My Page!</h1> </header> <main> <p>Hello, world! This is a simple HTML welcome page.</p> <p>Feel free to explore and <a href=\"#\">learn more about HTML</a>.</p> </main> <footer> <p>\u00a9 2025 Your Name. All rights reserved.</p> </footer> </body> </html>","title":"\u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u0438\u0447\u043a\u0438"},{"location":"lab1.html#4","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"lab1.html#_7","text":"import socket import threading clients = [] def handle_client(client_socket): clients.append(client_socket) while True: message = client_socket.recv(1024) if message.decode().lower() == 'exit' : clients.remove(client_socket) continue message = f\"User{str(client_socket).split(',')[0][18:]}: {message.decode()}\".encode() broadcast(message, client_socket) def broadcast(message, sender_socket): for client in clients: if client != sender_socket: client.send(message) def start_server(host='localhost', port=8083): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"Server is running on {host}:{port}\") while True: client_socket, client_address = server_socket.accept() thread = threading.Thread(target=handle_client, args=(client_socket,)) thread.start() if __name__ == \"__main__\": start_server()","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1.html#_8","text":"import socket import threading def receive_messages(client_socket): while True: message = client_socket.recv(1024).decode('utf-8') print(message) def start_client(host='localhost', port=8083): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect((host, port)) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.start() while True: message = input() if message.lower() == 'exit': client_socket.send(message.encode('utf-8')) client_socket.close() break client_socket.send(message.encode('utf-8')) if __name__ == \"__main__\": start_client()","title":"\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430"},{"location":"lab1.html#5","text":"\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: * \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. * \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"lab1.html#_9","text":"import socket import threading import urllib.parse grades = {} def handle_client(client_socket): request = client_socket.recv(1024).decode('utf-8') headers = request.split('\\r\\n') first_line = headers[0] method, path, _ = first_line.split() if method == \"POST\" and path == \"/grades\": content = headers[-1] content = content.split('&') discipline = urllib.parse.unquote(content[0][11:]) grade = urllib.parse.unquote(content[1][6:]) grades[discipline] = grades.get(discipline, []) + [grade] print(grades) response = \"HTTP/1.1 303 See Other\\r\\nLocation: /grades\\r\\n\\r\\n\" client_socket.sendall(response.encode()) elif method == \"GET\" and path == \"/grades\": response_body = \"\"\" <html> <head><title>\u041e\u0446\u0435\u043d\u043a\u0438</title></head> <body> <h1>\u041e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c</h1> <ul> \"\"\" for discipline in grades: response_body += f\"<li>{discipline}: {', '.join(map(str, grades.get(discipline, [])))}</li>\" response_body += \"\"\" </ul> <h2>\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</h2> <form method=\"post\" action=\"/grades\"> \u0414\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430: <input type=\"text\" name=\"discipline\"><br> \u041e\u0446\u0435\u043d\u043a\u0430: <input type=\"text\" name=\"grade\"><br> <input type=\"submit\" value=\"\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c\"> </form> </body> </html> \"\"\" response = ( \"HTTP/1.1 200 OK\\r\\n\" \"Content-Type: text/html; charset=utf-8\\r\\n\" f\"Content-Length: {len(response_body.encode())}\\r\\n\" \"Connection: close\\r\\n\" \"\\r\\n\" f\"{response_body}\" ) client_socket.sendall(response.encode('utf-8')) client_socket.close() def start_server(host=\"localhost\", port=8085): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind((host, port)) server_socket.listen(5) print(f\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {host}:{port}\") while True: client_sock, _ = server_socket.accept() handle_client(client_sock) if __name__ == \"__main__\": start_server()","title":"\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430"},{"location":"lab1.html#_10","text":"\u0412 \u044d\u0442\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u044f \u043d\u0430\u0443\u0447\u0438\u043b\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u043e\u0439 socket , \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u0430\u0437\u043e\u0432\u043e \u0438\u0437\u0443\u0447\u0438\u043b \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u044b TCP, UDP \u0438 HTTP","title":"\u0412\u044b\u0432\u043e\u0434"}]}